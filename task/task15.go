package task

import (
	"fmt"
	"math/big"
)

var justString string

// –ö –∫–∞–∫–∏–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞, –∏ –∫–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?

// –û—Ç–≤–µ—Ç: —Å–∏–º–≤–æ–ª –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–≥–æ –±–∞–π—Ç–∞,
// –ø–æ—ç—Ç–æ–º—É –º—ã –º–æ–∂–µ–º —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å –µ–≥–æ —Ç–∞–∫, —á—Ç–æ –æ–Ω –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è,
// –∫ —Ç–æ–º—É –∂–µ —Å—á–∏—Ç–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤ –±–∞–π—Ç–∞—Ö –Ω–µ —É–¥–æ–±–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º []rune slice, —á—Ç–æ–±—ã
// –æ—Ç–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏.
func someFunc() {
	bigBufferWithHeader := []byte{}
	for i := 0; i < 1e15; i++ {
		bigBufferWithHeader = append(bigBufferWithHeader, 0)
	}
	bigBufferWithHeader[0] = 0
	v := createHugeString(string(1 << 100))
	n := 5
	brokenString := v[:n]

	// –î–æ–ø—É—Å—Ç–∏–º, —á—Ç–æ –º—ã –Ω–µ —Ö–æ—Ç–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é —Å—Ç—Ä–æ–∫—É
	runes := makeRuneSliceOfN(v, n)

	//alocateSomeMem()

	fmt.Println(len(runes), cap(runes))
	justString = string(runes[:n])

	fmt.Println(brokenString)
	fmt.Println(justString)
}

func makeRuneSliceOfN(v string, n int) []rune {
	runes := make([]rune, n)
	bigN := big.NewInt(int64(n))
	for i, symbol := range v {
		if bigN.Cmp(big.NewInt(int64(i))) > 0 {
			break
		}
		runes[i] = symbol
	}

	return runes
}

func SomeBadThing() {
	someFunc()
}

func createHugeString(n string) string {

	var s string
	one := big.NewInt(1)
	bigN, _ := new(big.Int).SetString(n, 10)
	for i := big.NewInt(0); i.Cmp(bigN) < 0; i.Add(i, one) {
		s += "ü•∞ - OwO"
	}
	return s
}
